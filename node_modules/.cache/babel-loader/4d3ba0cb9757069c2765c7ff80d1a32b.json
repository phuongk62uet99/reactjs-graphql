{"ast":null,"code":"var _jsxFileName = \"/Users/phuonguet/Documents/project-cty/graphql-react/reactjs-graphql/src/components/BookList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardColumns from 'react-bootstrap/CardColumns';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport BookDetails from './BookDetails';\nimport { useQuery } from '@apollo/client';\nimport { getBooks } from '../graphql-client/queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookList = () => {\n  _s();\n\n  const [bookSelected, setBookSelected] = useState(null);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(getBooks);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading book details...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 25\n  }, this);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error loading book details!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 10\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      xs: 8,\n      children: /*#__PURE__*/_jsxDEV(CardColumns, {\n        children: data === null || data === void 0 ? void 0 : data.books.map(book => /*#__PURE__*/_jsxDEV(Card, {\n          border: \"info\",\n          text: \"info\",\n          className: \"text-center shadow\",\n          onClick: () => setBookSelected(book.id),\n          style: {\n            cursor: 'pointer'\n          },\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: book.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 29\n          }, this)\n        }, book.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      children: /*#__PURE__*/_jsxDEV(BookDetails, {\n        bookId: bookSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 3\n  }, this);\n};\n\n_s(BookList, \"43f5ZNXGJi8KgHqd1cxy1LiJQB0=\", false, function () {\n  return [useQuery];\n});\n\n_c = BookList;\nexport default BookList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookList\");","map":{"version":3,"sources":["/Users/phuonguet/Documents/project-cty/graphql-react/reactjs-graphql/src/components/BookList.js"],"names":["React","useState","Card","CardColumns","Row","Col","BookDetails","useQuery","getBooks","BookList","bookSelected","setBookSelected","loading","error","data","books","map","book","id","cursor","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,2BAAzB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,IAAD,CAAhD;AAEG,QAAM;AAAEW,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACC,QAAD,CAAzC;AAEA,MAAII,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AAEhB,MAAIC,KAAJ,EAAW;AACV,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AAED,sBACC,QAAC,GAAD;AAAA,4BACC,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA,6BACC,QAAC,WAAD;AAAA,kBACiBC,IADjB,aACiBA,IADjB,uBACiBA,IAAI,CAAEC,KAAN,CAAYC,GAAZ,CAAgBC,IAAI,iBACjB,QAAC,IAAD;AACI,UAAA,MAAM,EAAC,MADX;AAEI,UAAA,IAAI,EAAC,MAFT;AAGI,UAAA,SAAS,EAAC,oBAHd;AAKI,UAAA,OAAO,EAAE,MAAMN,eAAe,CAACM,IAAI,CAACC,EAAN,CALlC;AAMI,UAAA,KAAK,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAV,WANX;AAAA,iCAQI,QAAC,IAAD,CAAM,IAAN;AAAA,sBAAYF,IAAI,CAACG;AAAjB;AAAA;AAAA;AAAA;AAAA;AARJ,WAISH,IAAI,CAACC,EAJd;AAAA;AAAA;AAAA;AAAA,gBADH;AADjB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAiBC,QAAC,GAAD;AAAA,6BACC,QAAC,WAAD;AAAa,QAAA,MAAM,EAAER;AAArB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAjBD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAuBA,CAlCD;;GAAMD,Q;UAG+BF,Q;;;KAH/BE,Q;AAoCN,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardColumns from 'react-bootstrap/CardColumns';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport BookDetails from './BookDetails';\n\nimport { useQuery } from '@apollo/client'\nimport { getBooks } from '../graphql-client/queries'\n\nconst BookList = () => {\n\tconst [bookSelected, setBookSelected] = useState(null);\n\n    const { loading, error, data } = useQuery(getBooks);\n\n    if (loading) return <p>Loading book details...</p>\n\n\tif (error) {\n\t\treturn <p>Error loading book details!</p>\n\t}\n\n\treturn (\n\t\t<Row>\n\t\t\t<Col xs={8}>\n\t\t\t\t<CardColumns>\n                    {data?.books.map(book => (\n                        <Card\n                            border='info'\n                            text='info'\n                            className='text-center shadow'\n                            key={book.id}\n                            onClick={() => setBookSelected(book.id)}\n                            style={{ cursor: 'pointer' }}\n                        >\n                            <Card.Body>{book.name}</Card.Body>\n                        </Card>\n                    ))}\n\t\t\t\t</CardColumns>\n\t\t\t</Col>\n\t\t\t<Col>\n\t\t\t\t<BookDetails bookId={bookSelected} />\n\t\t\t</Col>\n\t\t</Row>\n\t)\n}\n\nexport default BookList\n"]},"metadata":{},"sourceType":"module"}