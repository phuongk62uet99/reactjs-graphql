{"ast":null,"code":"var _jsxFileName = \"/Users/phuonguet/Documents/project-cty/graphql-react/reactjs-graphql/src/components/BookDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport { getSingleBook } from '../graphql-client/queries';\nimport { useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookDetails = ({\n  bookId\n}) => {\n  _s();\n\n  console.log(bookId);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(getSingleBook, {\n    variables: {\n      id: bookId\n    },\n    skip: bookId === null\n  });\n  console.log(data);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading book details...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 25\n  }, this);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error loading book details!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 10\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    bg: \"info\",\n    text: \"white\",\n    className: \"shadow\",\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: data === null ? /*#__PURE__*/_jsxDEV(Card.Text, {\n        children: \"Please select a book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          children: [\"T\\xEAn s\\xE1ch : \", data === null || data === void 0 ? void 0 : data.book.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Card.Subtitle, {\n          children: [\"L\\u1EA7n xu\\u1EA5t b\\u1EA3n : \", data === null || data === void 0 ? void 0 : data.book.genre]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"T\\xE1c gi\\u1EA3 : \", data === null || data === void 0 ? void 0 : data.book.author.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Tu\\u1ED5i: \", data === null || data === void 0 ? void 0 : data.book.author.age]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"All books by this author\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: data.book.author.books.map(book => {\n            /*#__PURE__*/\n            _jsxDEV(\"li\", {\n              children: book.name\n            }, book.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 3\n  }, this);\n};\n\n_s(BookDetails, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = BookDetails;\nexport default BookDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookDetails\");","map":{"version":3,"sources":["/Users/phuonguet/Documents/project-cty/graphql-react/reactjs-graphql/src/components/BookDetails.js"],"names":["React","Fragment","Card","getSingleBook","useQuery","BookDetails","bookId","console","log","loading","error","data","variables","id","skip","book","name","genre","author","age","books","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,QAAT,QAAyB,gBAAzB;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAAA;;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACD,aAAD,EAAgB;AAC3DS,IAAAA,SAAS,EAAE;AACVC,MAAAA,EAAE,EAAEP;AADM,KADgD;AAI3DQ,IAAAA,IAAI,EAAER,MAAM,KAAK;AAJ0C,GAAhB,CAAzC;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AAEA,MAAIF,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AAEhB,MAAIC,KAAJ,EAAW;AACV,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AAED,sBACC,QAAC,IAAD;AAAM,IAAA,EAAE,EAAC,MAAT;AAAgB,IAAA,IAAI,EAAC,OAArB;AAA6B,IAAA,SAAS,EAAC,QAAvC;AAAA,2BACC,QAAC,IAAD,CAAM,IAAN;AAAA,gBACcC,IAAI,KAAK,IAAT,gBACG,QAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,gBAGO,QAAC,QAAD;AAAA,gCACI,QAAC,IAAD,CAAM,KAAN;AAAA,0CAAwBA,IAAxB,aAAwBA,IAAxB,uBAAwBA,IAAI,CAAEI,IAAN,CAAWC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,IAAD,CAAM,QAAN;AAAA,uDAA+BL,IAA/B,aAA+BA,IAA/B,uBAA+BA,IAAI,CAAEI,IAAN,CAAWE,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,2CAAcN,IAAd,aAAcA,IAAd,uBAAcA,IAAI,CAAEI,IAAN,CAAWG,MAAX,CAAkBF,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA,oCAAUL,IAAV,aAAUA,IAAV,uBAAUA,IAAI,CAAEI,IAAN,CAAWG,MAAX,CAAkBC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAA,oBACKR,IAAI,CAACI,IAAL,CAAUG,MAAV,CAAiBE,KAAjB,CAAuBC,GAAvB,CAA2BN,IAAI,IAAI;AAChC;AAAA;AAAA,wBAAmBA,IAAI,CAACC;AAAxB,eAASD,IAAI,CAACF,EAAd;AAAA;AAAA;AAAA;AAAA;AACH,WAFA;AADL;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAJrB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAsBA,CAtCD;;GAAMR,W;UAE+BD,Q;;;KAF/BC,W;AAwCN,eAAeA,WAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport { getSingleBook } from '../graphql-client/queries'\nimport { useQuery } from '@apollo/client'\n\nconst BookDetails = ({ bookId }) => {\n    console.log(bookId);\n    const { loading, error, data } = useQuery(getSingleBook, {\n\t\tvariables: {\n\t\t\tid: bookId\n\t\t},\n\t\tskip: bookId === null\n\t});\n    console.log(data);\n\n    if (loading) return <p>Loading book details...</p>\n\n\tif (error) {\n\t\treturn <p>Error loading book details!</p>\n\t}\n\n\treturn (\n\t\t<Card bg='info' text='white' className='shadow'>\n\t\t\t<Card.Body>\n                {data === null ? \n                    <Card.Text>Please select a book</Card.Text>\n                    : (\n                        <Fragment>\n                            <Card.Title>Tên sách : {data?.book.name}</Card.Title>\n                            <Card.Subtitle>Lần xuất bản : {data?.book.genre}</Card.Subtitle>\n                            <p>Tác giả : {data?.book.author.name}</p>\n                            <p>Tuổi: {data?.book.author.age}</p>\n                            <p>All books by this author</p>\n                            <ul>\n                                {data.book.author.books.map(book => {\n                                    <li key={book.id}>{book.name}</li>\n                                })}\n                            </ul>\n                        </Fragment>\n                    )}\n\t\t\t</Card.Body>\n\t\t</Card>\n\t)\n}\n\nexport default BookDetails;\n"]},"metadata":{},"sourceType":"module"}